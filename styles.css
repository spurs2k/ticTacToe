@import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&display=swap");

:root {
    --black: #000000;
    --gray: #2e4756;
    --turquoise: #3cc4bf;
    --yellow: #f2b147;
    --light-gray: #d3d3d3;
}

* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    list-style: none;
    font-family: "Montserrat", sans-serif;
    border: none;
}

/* height at 100% to avoid padding on mobile */
html,
body {
    height: 100%;
    background-color: var(--black);
}

/* Shared utility classes */
button:hover {
    cursor: pointer;
    opacity: 90%;
}

.hidden {
    display: none !important;
}

.yellow {
    color: var(--yellow);
}

.turquoise {
    color: var(--turquoise);
}

.shadow {
    box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px,
        rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
}

.border {
    border: 1px solid rgba(211, 211, 211, 0.4) !important;
}

/* grid templates allow me to set padding for repeated rows and columns. Gap adds padding to all grid items */
.grid {
    display: grid;
    grid-template-columns: repeat(3, 80px);
    grid-template-rows: 50px repeat(3, 80px) 60px;
    gap: 5px;
}

/* settings for smaller screens such as tablets and phones */
@media (min-width: 768px) {
    .grid {
        width: 490px;
        grid-template-columns: repeat(3, 150px);
        grid-template-rows: 50px repeat(3, 150px) 60px;
        gap: 20px;
    }
}

/* grid-column start and end allows me to set how wide I want the turn column, in this case, I opted for 2 columns. Starts at column 1, ends at column 3. */
.turn {
    color: var(--yellow);
    grid-column-start: 1;
    grid-column-end: 3;
    align-self: center;
    display: flex;
    align-items: center;
    gap: 20px;
}


/* Animation to move text from left to right starting left by negative 20px to final position */
@keyframes turn-text-animation {
    0% {
        opacity: 0;
        transform: translateX(-20px);
    }

    100% {
        opacity: 100%;
        transform: translateX(0);
    }
}

.turn p {
    font-size: 14px;
    animation: 0.6s ease-in-out turn-text-animation;
}

/* on refresh the X from font awesome will increase from 100% to 180% size and then back */
@keyframes turn-icon-animation {
    0% {
        transform: scale(1);
    }

    25% {
        transform: scale(1.8);
    }

    100% {
        transform: scale(1);
    }
}

/* font-size controls the size of the X from font awesome. Margin-left adjusts how far the X is indented from the left */
.turn i {
    font-size: 1.8rem;
    margin-left: 10px;
    animation: 0.6s ease-in-out turn-icon-animation;
}


/* Menu Styles */
.menu {
    position: relative;
}

.menu-btn {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: space-around;
    align-items: center;
    border-radius: 10px;
    color: white;
    background-color: var(--gray);
    border: 1px solid transparent;
}

.menu-btn:focus,
.menu-btn:hover {
    background-color: rgba(211, 211, 211, 0.07);
}

/* position aboslute is nearest to the relative parent .menu
z-index goes over the grid instead of behind */
.items {
    position: absolute;
    z-index: 10;
    top: 60px;
    right: 0;
    background-color: var(--gray);
    border-radius: 2px;
    padding: 10px;
}

.items button {
    background-color: transparent;
    padding: 8px;
    color: white;
}

.items button:hover {
    text-decoration: underline;
    cursor: pointer;
}

.square {
    background-color: var(--gray);
    border-radius: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 3rem;
}

.square:hover {
    cursor: pointer;
    opacity: 90%;
}

.score {
    background-color: blue;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    border-radius: 10px;
}

.score p {
    font-size: 14px;
    font-weight: 600;
}

.score span {
    font-size: 12px;
    margin-top: 2px;
}

.actions {
    background-color: purple;
}

/* Using flex I am able to move the grid into the center of the screen by changing flex-direction to column, and centering the justify-content and align-items. */
body {
    display: flex;
    padding: 90px 20px;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

/* Footer Styles */
footer {
    color: white;
    margin-top: 50px;
}

footer p {
    margin-top: 20px;
    text-align: center;
}

footer a {
    color: var(--turquoise);
}

/* Modal styles - opens when game finishes  */
.modal {
    display: flex;
    justify-content: center;
    align-items: center;
    position: fixed;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
}

.modal-contents {
    /* transform: translateY(-80px); */
    height: 150px;
    width: 100%;
    max-width: 300px;
    background-color: #2a4544;
    border-radius: 20px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 20px;
    color: white;
    margin: 10px;
}

.modal-contents button {
    padding: 10px;
    background-color: var(--turquoise);
    color: #2a4544;
    border-radius: 3px;
}